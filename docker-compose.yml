services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - mtg-network

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - mtg-network

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - mtg-network

  # KSQLDB Server for stream processing and queries
  ksqldb-server:
    image: confluentinc/ksqldb-server:0.29.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:29092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_STREAMS_PRODUCER_MAX_REQUEST_SIZE: 10485760
      KSQL_KSQL_STREAMS_PRODUCER_MAX_REQUEST_SIZE: 10485760
    networks:
      - mtg-network

  # KSQLDB CLI
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.29.0
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    networks:
      - mtg-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: mtg_user
      POSTGRES_PASSWORD: mtg_password
      POSTGRES_DB: mtg
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./data-ingestion/mtg-ingestor/sql/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - mtg-network

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - mtg-network

  # Create MinIO buckets
  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/mtg-data || true;
      mc policy set public myminio/mtg-data;
      exit 0;
      "
    networks:
      - mtg-network

  # Flink JobManager
  flink-jobmanager:
    image: flink:1.18-java11
    container_name: flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        state.backend: filesystem
        state.checkpoints.dir: file:///tmp/flink-checkpoints
        state.savepoints.dir: file:///tmp/flink-savepoints
    volumes:
      - flink-checkpoints:/tmp/flink-checkpoints
      - flink-savepoints:/tmp/flink-savepoints
    networks:
      - mtg-network

  # Flink TaskManager
  flink-taskmanager:
    image: flink:1.18-java11
    depends_on:
      - flink-jobmanager
    command: taskmanager
    deploy:
      replicas: 2
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
        state.backend: filesystem
        state.checkpoints.dir: file:///tmp/flink-checkpoints
        state.savepoints.dir: file:///tmp/flink-savepoints
    volumes:
      - flink-checkpoints:/tmp/flink-checkpoints
      - flink-savepoints:/tmp/flink-savepoints
    networks:
      - mtg-network

  # MTG Ingestor (runs once for testing)
  mtg-ingestor:
    build:
      context: ./data-ingestion/mtg-ingestor
      dockerfile: Dockerfile
    container_name: mtg-ingestor
    depends_on:
      - kafka
      - postgres
    environment:
      KAFKA_BROKERS: kafka:29092
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: mtg_password
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_ENDPOINT_URL: http://minio:9000
      MTG_APP_ENVIRONMENT: development
      MTG_APP_LOG_LEVEL: debug
    volumes:
      - ./data-ingestion/mtg-ingestor/configs:/app/configs
    networks:
      - mtg-network
    profiles:
      - ingest

  # Deck Ingestor
  deck-ingestor:
    build:
      context: ./data-ingestion/mtg-ingestor
      dockerfile: Dockerfile
    container_name: deck-ingestor
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERS: kafka:29092
      MTG_APP_ENVIRONMENT: development
      MTG_APP_LOG_LEVEL: debug
    volumes:
      - ./decks:/decks:ro
      - ./data-ingestion/mtg-ingestor/configs:/app/configs
    command: ["/app/deck-ingester", "-dir", "/decks"]
    networks:
      - mtg-network
    profiles:
      - deck-ingest

  # Web UI for queries and dashboard
  web-ui:
    build:
      context: ./data-ingestion/mtg-ingestor/web-ui
      dockerfile: Dockerfile
    container_name: web-ui
    ports:
      - "8090:8090"
    depends_on:
      - kafka
      - ksqldb-server
    environment:
      PORT: "8090"
    networks:
      - mtg-network

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: adminer
    ports:
      - "8082:8080"
    networks:
      - mtg-network

volumes:
  postgres-data:
  minio-data:
  flink-checkpoints:
  flink-savepoints:

networks:
  mtg-network:
    driver: bridge